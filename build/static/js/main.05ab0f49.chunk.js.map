{"version":3,"sources":["quotes/QuoteGenerator.js","quotes/LinkBuilder.js","App.js","index.js"],"names":["quotes","author","quote","indexOfLastSelection","generateRandomQuote","upperBound","quoteCount","length","indexRandom","Math","floor","random","buildLink","quoteString","replace","authorString","concat","linkString","console","log","App","className","RandomQuoteMachine","props","randomQuoteInitial","state","quoteCurrent","authorCurrent","generateNewQuote","bind","randomQuote","this","setState","id","style","textAlign","Button","onClick","variant","href","target","role","React","Component","rootElement","document","getElementById","ReactDOM","render"],"mappings":"wOAAMA,EAAS,CACb,CACEC,OAAQ,eACRC,MACE,2MAEJ,CACED,OAAQ,qBACRC,MAAO,2DAET,CACED,OAAQ,sBACRC,MAAO,oDAET,CACED,OAAQ,gBACRC,MAAO,+BAET,CACED,OAAQ,kBACRC,MAAO,iEAIPC,GAAwB,EAErB,SAASC,IACd,IAUiBC,EAVbC,EAAaN,EAAOO,OACpBC,GASaH,EATWC,EAUrBG,KAAKC,MAAMD,KAAKE,SAAWN,IAJlC,OALIG,IAAgBL,IAClBK,GAAeA,EAAc,GAAKF,GAGpCH,EAAuBK,EADHR,EAAOQ,GC9BtB,SAASI,EAAUV,EAAOD,GAC/B,IAAIY,EAAcX,EAAMY,QAAQ,MAAO,OACnCC,EAAe,OACnBA,EAAaC,OAAOf,GAEpB,IAAIgB,EAPiB,yCAOWD,OAAOH,GAIvC,OAHAI,EAAaA,EAAWD,OAAOD,GAC/BG,QAAQC,IAAIF,GAELA,E,WCJM,SAASG,IACtB,OACE,qBAAKC,UAAU,sBAAf,SACE,cAAC,EAAD,M,IAKAC,E,kDACJ,WAAYC,GAAQ,IAAD,sBACjB,cAAMA,GAEN,IAAIC,EAAqBpB,IAHR,OAIjB,EAAKqB,MAAQ,CACXC,aAAcF,EAAmBtB,MACjCyB,cAAeH,EAAmBvB,QAGpC,EAAK2B,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBATP,E,oDAWnB,WACE,IAAIC,EAAc1B,IAClB2B,KAAKC,SAAS,CACZN,aAAcI,EAAY5B,MAC1ByB,cAAeG,EAAY7B,W,oBAG/B,WACE,OACE,sBAAKgC,GAAG,YAAR,UACE,mBAAGA,GAAG,OAAOZ,UAAU,aAAvB,SACGU,KAAKN,MAAMC,eAEd,oBAAGO,GAAG,SAASC,MAAO,CAAEC,UAAW,SAAnC,eACKJ,KAAKN,MAAME,iBAEhB,cAACS,EAAA,EAAD,CACEH,GAAG,YACHI,QAASN,KAAKH,iBACdU,QAAQ,UAHV,uBAOA,cAACF,EAAA,EAAD,CACEH,GAAG,cACHM,KAAM3B,EAAUmB,KAAKN,MAAMC,aAAcK,KAAKN,MAAME,eACpDa,OAAO,SACPF,QAAQ,UACRG,KAAK,SALP,SAOE,cAAC,IAAD,a,GA1CuBC,IAAMC,WCVjCC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAAC5B,EAAD,MAEFwB,K","file":"static/js/main.05ab0f49.chunk.js","sourcesContent":["const quotes = [\n  {\n    author: \"Genghis Khan\",\n    quote:\n      \"The greatest happiness is to vanquish your enemies, to chase them before you, to rob them of their wealth, to see those dear to them bathed in tears, to clasp to your bosom their wives and daughters.\"\n  },\n  {\n    author: \"Napoleon Bonaparte\",\n    quote: \"Never interrupt your enemy when he is making a mistake.\"\n  },\n  {\n    author: \"Alexander the Great\",\n    quote: \"There is nothing impossible to him who will try.\"\n  },\n  {\n    author: \"Julius Caesar\",\n    quote: \"I came. I saw. I conquered.\"\n  },\n  {\n    author: \"Augustus Caesar\",\n    quote: \"I found Rome a city of bricks and I left it a city of Marble\"\n  }\n];\n\nlet indexOfLastSelection = -1;\n\nexport function generateRandomQuote() {\n  let quoteCount = quotes.length;\n  let indexRandom = randomInt(quoteCount);\n  if (indexRandom === indexOfLastSelection) {\n    indexRandom = (indexRandom + 1) % quoteCount;\n  }\n  let quoteSelected = quotes[indexRandom];\n  indexOfLastSelection = indexRandom;\n  return quoteSelected;\n}\n\nfunction randomInt(upperBound) {\n  return Math.floor(Math.random() * upperBound);\n}\n","const linkStringBase = \"https://twitter.com/intent/tweet?text=\";\n\nexport function buildLink(quote, author) {\n  let quoteString = quote.replace(/\\s/g, \"%20\");\n  let authorString = \"%20-\";\n  authorString.concat(author);\n\n  let linkString = linkStringBase.concat(quoteString);\n  linkString = linkString.concat(authorString);\n  console.log(linkString);\n\n  return linkString;\n}\n","import \"./styles.css\";\nimport React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { FaTwitter } from \"react-icons/fa\";\nimport { generateRandomQuote } from \"./quotes/QuoteGenerator\";\nimport { buildLink } from \"./quotes/LinkBuilder\";\n\nexport default function App() {\n  return (\n    <div className=\"App quote-generator\">\n      <RandomQuoteMachine />\n    </div>\n  );\n}\n\nclass RandomQuoteMachine extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let randomQuoteInitial = generateRandomQuote();\n    this.state = {\n      quoteCurrent: randomQuoteInitial.quote,\n      authorCurrent: randomQuoteInitial.author\n    };\n\n    this.generateNewQuote = this.generateNewQuote.bind(this);\n  }\n  generateNewQuote() {\n    let randomQuote = generateRandomQuote();\n    this.setState({\n      quoteCurrent: randomQuote.quote,\n      authorCurrent: randomQuote.author\n    });\n  }\n  render() {\n    return (\n      <div id=\"quote-box\">\n        <p id=\"text\" className=\"quote-text\">\n          {this.state.quoteCurrent}\n        </p>\n        <p id=\"author\" style={{ textAlign: \"right\" }}>\n          - {this.state.authorCurrent}\n        </p>\n        <Button\n          id=\"new-quote\"\n          onClick={this.generateNewQuote}\n          variant=\"primary\"\n        >\n          New Quote\n        </Button>\n        <Button\n          id=\"tweet-quote\"\n          href={buildLink(this.state.quoteCurrent, this.state.authorCurrent)}\n          target=\"_blank\"\n          variant=\"primary\"\n          role=\"button\"\n        >\n          <FaTwitter />\n        </Button>\n      </div>\n    );\n  }\n}\n","import React, { StrictMode} from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);"],"sourceRoot":""}